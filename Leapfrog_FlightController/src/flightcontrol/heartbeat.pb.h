// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heartbeat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_heartbeat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_heartbeat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>

// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_heartbeat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_heartbeat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_heartbeat_2eproto;
namespace leapfrog {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Heartbeat;
class HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
}  // namespace leapfrog
PROTOBUF_NAMESPACE_OPEN
template<> ::leapfrog::Command* Arena::CreateMaybeMessage<::leapfrog::Command>(Arena*);
template<> ::leapfrog::Heartbeat* Arena::CreateMaybeMessage<::leapfrog::Heartbeat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace leapfrog {

// ===================================================================

class Heartbeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:leapfrog.Heartbeat) */ {
 public:
  inline Heartbeat() : Heartbeat(nullptr) {};
  virtual ~Heartbeat();

  Heartbeat(const Heartbeat& from);
  Heartbeat(Heartbeat&& from) noexcept
    : Heartbeat() {
    *this = ::std::move(from);
  }

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heartbeat& operator=(Heartbeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Heartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Heartbeat& a, Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Heartbeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Heartbeat* New() const final {
    return CreateMaybeMessage<Heartbeat>(nullptr);
  }

  Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Heartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Heartbeat& from);
  void MergeFrom(const Heartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "leapfrog.Heartbeat";
  }
  protected:
  explicit Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_heartbeat_2eproto);
    return ::descriptor_table_heartbeat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollDegFieldNumber = 1,
    kPitchDegFieldNumber = 2,
    kYawDegFieldNumber = 3,
    kAccXGFieldNumber = 4,
    kAccYGFieldNumber = 5,
    kAccZGFieldNumber = 6,
    kAngvelXDegsFieldNumber = 7,
    kAngvelYDegsFieldNumber = 8,
    kAngvelZDegsFieldNumber = 9,
    kTvcAPosFieldNumber = 10,
    kTvcBPosFieldNumber = 11,
    kEngineTurbineRpmFieldNumber = 12,
    kEngineRpmSetpointFieldNumber = 13,
    kEngineEgtCFieldNumber = 14,
    kEnginePumpVoltageFieldNumber = 15,
    kEngineTurbineStateFieldNumber = 16,
    kEngineOffConditionFieldNumber = 17,
    kEngineThrottlePercentFieldNumber = 18,
    kEngineCurrentAFieldNumber = 19,
    kAltitudeFieldNumber = 20,
    kHeartbeatCounterFieldNumber = 21,
    kGuidanceInternalFieldNumber = 22,
    kEnableAcsFieldNumber = 23,
    kEnableTvcFieldNumber = 24,
    kEnableEngineFieldNumber = 25,
    kImuCalibrationStatusFieldNumber = 26,
  };
  // float roll_deg = 1;
  void clear_roll_deg();
  float roll_deg() const;
  void set_roll_deg(float value);
  private:
  float _internal_roll_deg() const;
  void _internal_set_roll_deg(float value);
  public:

  // float pitch_deg = 2;
  void clear_pitch_deg();
  float pitch_deg() const;
  void set_pitch_deg(float value);
  private:
  float _internal_pitch_deg() const;
  void _internal_set_pitch_deg(float value);
  public:

  // float yaw_deg = 3;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // float acc_x_g = 4;
  void clear_acc_x_g();
  float acc_x_g() const;
  void set_acc_x_g(float value);
  private:
  float _internal_acc_x_g() const;
  void _internal_set_acc_x_g(float value);
  public:

  // float acc_y_g = 5;
  void clear_acc_y_g();
  float acc_y_g() const;
  void set_acc_y_g(float value);
  private:
  float _internal_acc_y_g() const;
  void _internal_set_acc_y_g(float value);
  public:

  // float acc_z_g = 6;
  void clear_acc_z_g();
  float acc_z_g() const;
  void set_acc_z_g(float value);
  private:
  float _internal_acc_z_g() const;
  void _internal_set_acc_z_g(float value);
  public:

  // float angvel_x_degs = 7;
  void clear_angvel_x_degs();
  float angvel_x_degs() const;
  void set_angvel_x_degs(float value);
  private:
  float _internal_angvel_x_degs() const;
  void _internal_set_angvel_x_degs(float value);
  public:

  // float angvel_y_degs = 8;
  void clear_angvel_y_degs();
  float angvel_y_degs() const;
  void set_angvel_y_degs(float value);
  private:
  float _internal_angvel_y_degs() const;
  void _internal_set_angvel_y_degs(float value);
  public:

  // float angvel_z_degs = 9;
  void clear_angvel_z_degs();
  float angvel_z_degs() const;
  void set_angvel_z_degs(float value);
  private:
  float _internal_angvel_z_degs() const;
  void _internal_set_angvel_z_degs(float value);
  public:

  // float tvc_a_pos = 10;
  void clear_tvc_a_pos();
  float tvc_a_pos() const;
  void set_tvc_a_pos(float value);
  private:
  float _internal_tvc_a_pos() const;
  void _internal_set_tvc_a_pos(float value);
  public:

  // float tvc_b_pos = 11;
  void clear_tvc_b_pos();
  float tvc_b_pos() const;
  void set_tvc_b_pos(float value);
  private:
  float _internal_tvc_b_pos() const;
  void _internal_set_tvc_b_pos(float value);
  public:

  // int32 engine_turbine_rpm = 12;
  void clear_engine_turbine_rpm();
  ::PROTOBUF_NAMESPACE_ID::int32 engine_turbine_rpm() const;
  void set_engine_turbine_rpm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_engine_turbine_rpm() const;
  void _internal_set_engine_turbine_rpm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 engine_rpm_setpoint = 13;
  void clear_engine_rpm_setpoint();
  ::PROTOBUF_NAMESPACE_ID::int32 engine_rpm_setpoint() const;
  void set_engine_rpm_setpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_engine_rpm_setpoint() const;
  void _internal_set_engine_rpm_setpoint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 engine_egt_c = 14;
  void clear_engine_egt_c();
  ::PROTOBUF_NAMESPACE_ID::int32 engine_egt_c() const;
  void set_engine_egt_c(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_engine_egt_c() const;
  void _internal_set_engine_egt_c(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float engine_pump_voltage = 15;
  void clear_engine_pump_voltage();
  float engine_pump_voltage() const;
  void set_engine_pump_voltage(float value);
  private:
  float _internal_engine_pump_voltage() const;
  void _internal_set_engine_pump_voltage(float value);
  public:

  // uint32 engine_turbine_state = 16;
  void clear_engine_turbine_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 engine_turbine_state() const;
  void set_engine_turbine_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_engine_turbine_state() const;
  void _internal_set_engine_turbine_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 engine_off_condition = 17;
  void clear_engine_off_condition();
  ::PROTOBUF_NAMESPACE_ID::uint32 engine_off_condition() const;
  void set_engine_off_condition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_engine_off_condition() const;
  void _internal_set_engine_off_condition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 engine_throttle_percent = 18;
  void clear_engine_throttle_percent();
  ::PROTOBUF_NAMESPACE_ID::uint32 engine_throttle_percent() const;
  void set_engine_throttle_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_engine_throttle_percent() const;
  void _internal_set_engine_throttle_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float engine_current_a = 19;
  void clear_engine_current_a();
  float engine_current_a() const;
  void set_engine_current_a(float value);
  private:
  float _internal_engine_current_a() const;
  void _internal_set_engine_current_a(float value);
  public:

  // int32 altitude = 20;
  void clear_altitude();
  ::PROTOBUF_NAMESPACE_ID::int32 altitude() const;
  void set_altitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_altitude() const;
  void _internal_set_altitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 heartbeat_counter = 21;
  void clear_heartbeat_counter();
  ::PROTOBUF_NAMESPACE_ID::uint32 heartbeat_counter() const;
  void set_heartbeat_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heartbeat_counter() const;
  void _internal_set_heartbeat_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool guidance_internal = 22;
  void clear_guidance_internal();
  bool guidance_internal() const;
  void set_guidance_internal(bool value);
  private:
  bool _internal_guidance_internal() const;
  void _internal_set_guidance_internal(bool value);
  public:

  // bool enable_acs = 23;
  void clear_enable_acs();
  bool enable_acs() const;
  void set_enable_acs(bool value);
  private:
  bool _internal_enable_acs() const;
  void _internal_set_enable_acs(bool value);
  public:

  // bool enable_tvc = 24;
  void clear_enable_tvc();
  bool enable_tvc() const;
  void set_enable_tvc(bool value);
  private:
  bool _internal_enable_tvc() const;
  void _internal_set_enable_tvc(bool value);
  public:

  // bool enable_engine = 25;
  void clear_enable_engine();
  bool enable_engine() const;
  void set_enable_engine(bool value);
  private:
  bool _internal_enable_engine() const;
  void _internal_set_enable_engine(bool value);
  public:

  // bool imu_calibration_status = 26;
  void clear_imu_calibration_status();
  bool imu_calibration_status() const;
  void set_imu_calibration_status(bool value);
  private:
  bool _internal_imu_calibration_status() const;
  void _internal_set_imu_calibration_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:leapfrog.Heartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float roll_deg_;
  float pitch_deg_;
  float yaw_deg_;
  float acc_x_g_;
  float acc_y_g_;
  float acc_z_g_;
  float angvel_x_degs_;
  float angvel_y_degs_;
  float angvel_z_degs_;
  float tvc_a_pos_;
  float tvc_b_pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_turbine_rpm_;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_rpm_setpoint_;
  ::PROTOBUF_NAMESPACE_ID::int32 engine_egt_c_;
  float engine_pump_voltage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 engine_turbine_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 engine_off_condition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 engine_throttle_percent_;
  float engine_current_a_;
  ::PROTOBUF_NAMESPACE_ID::int32 altitude_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heartbeat_counter_;
  bool guidance_internal_;
  bool enable_acs_;
  bool enable_tvc_;
  bool enable_engine_;
  bool imu_calibration_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_heartbeat_2eproto;
};
// -------------------------------------------------------------------

class Command PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:leapfrog.Command) */ {
 public:
  inline Command() : Command(nullptr) {};
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "leapfrog.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_heartbeat_2eproto);
    return ::descriptor_table_heartbeat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandTextFieldNumber = 1,
  };
  // string command_text = 1;
  void clear_command_text();
  const std::string& command_text() const;
  void set_command_text(const std::string& value);
  void set_command_text(std::string&& value);
  void set_command_text(const char* value);
  void set_command_text(const char* value, size_t size);
  std::string* mutable_command_text();
  std::string* release_command_text();
  void set_allocated_command_text(std::string* command_text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_command_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_command_text(
      std::string* command_text);
  private:
  const std::string& _internal_command_text() const;
  void _internal_set_command_text(const std::string& value);
  std::string* _internal_mutable_command_text();
  public:

  // @@protoc_insertion_point(class_scope:leapfrog.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_heartbeat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Heartbeat

// float roll_deg = 1;
inline void Heartbeat::clear_roll_deg() {
  roll_deg_ = 0;
}
inline float Heartbeat::_internal_roll_deg() const {
  return roll_deg_;
}
inline float Heartbeat::roll_deg() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.roll_deg)
  return _internal_roll_deg();
}
inline void Heartbeat::_internal_set_roll_deg(float value) {
  
  roll_deg_ = value;
}
inline void Heartbeat::set_roll_deg(float value) {
  _internal_set_roll_deg(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.roll_deg)
}

// float pitch_deg = 2;
inline void Heartbeat::clear_pitch_deg() {
  pitch_deg_ = 0;
}
inline float Heartbeat::_internal_pitch_deg() const {
  return pitch_deg_;
}
inline float Heartbeat::pitch_deg() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.pitch_deg)
  return _internal_pitch_deg();
}
inline void Heartbeat::_internal_set_pitch_deg(float value) {
  
  pitch_deg_ = value;
}
inline void Heartbeat::set_pitch_deg(float value) {
  _internal_set_pitch_deg(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.pitch_deg)
}

// float yaw_deg = 3;
inline void Heartbeat::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float Heartbeat::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float Heartbeat::yaw_deg() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.yaw_deg)
  return _internal_yaw_deg();
}
inline void Heartbeat::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void Heartbeat::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.yaw_deg)
}

// float acc_x_g = 4;
inline void Heartbeat::clear_acc_x_g() {
  acc_x_g_ = 0;
}
inline float Heartbeat::_internal_acc_x_g() const {
  return acc_x_g_;
}
inline float Heartbeat::acc_x_g() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.acc_x_g)
  return _internal_acc_x_g();
}
inline void Heartbeat::_internal_set_acc_x_g(float value) {
  
  acc_x_g_ = value;
}
inline void Heartbeat::set_acc_x_g(float value) {
  _internal_set_acc_x_g(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.acc_x_g)
}

// float acc_y_g = 5;
inline void Heartbeat::clear_acc_y_g() {
  acc_y_g_ = 0;
}
inline float Heartbeat::_internal_acc_y_g() const {
  return acc_y_g_;
}
inline float Heartbeat::acc_y_g() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.acc_y_g)
  return _internal_acc_y_g();
}
inline void Heartbeat::_internal_set_acc_y_g(float value) {
  
  acc_y_g_ = value;
}
inline void Heartbeat::set_acc_y_g(float value) {
  _internal_set_acc_y_g(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.acc_y_g)
}

// float acc_z_g = 6;
inline void Heartbeat::clear_acc_z_g() {
  acc_z_g_ = 0;
}
inline float Heartbeat::_internal_acc_z_g() const {
  return acc_z_g_;
}
inline float Heartbeat::acc_z_g() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.acc_z_g)
  return _internal_acc_z_g();
}
inline void Heartbeat::_internal_set_acc_z_g(float value) {
  
  acc_z_g_ = value;
}
inline void Heartbeat::set_acc_z_g(float value) {
  _internal_set_acc_z_g(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.acc_z_g)
}

// float angvel_x_degs = 7;
inline void Heartbeat::clear_angvel_x_degs() {
  angvel_x_degs_ = 0;
}
inline float Heartbeat::_internal_angvel_x_degs() const {
  return angvel_x_degs_;
}
inline float Heartbeat::angvel_x_degs() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.angvel_x_degs)
  return _internal_angvel_x_degs();
}
inline void Heartbeat::_internal_set_angvel_x_degs(float value) {
  
  angvel_x_degs_ = value;
}
inline void Heartbeat::set_angvel_x_degs(float value) {
  _internal_set_angvel_x_degs(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.angvel_x_degs)
}

// float angvel_y_degs = 8;
inline void Heartbeat::clear_angvel_y_degs() {
  angvel_y_degs_ = 0;
}
inline float Heartbeat::_internal_angvel_y_degs() const {
  return angvel_y_degs_;
}
inline float Heartbeat::angvel_y_degs() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.angvel_y_degs)
  return _internal_angvel_y_degs();
}
inline void Heartbeat::_internal_set_angvel_y_degs(float value) {
  
  angvel_y_degs_ = value;
}
inline void Heartbeat::set_angvel_y_degs(float value) {
  _internal_set_angvel_y_degs(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.angvel_y_degs)
}

// float angvel_z_degs = 9;
inline void Heartbeat::clear_angvel_z_degs() {
  angvel_z_degs_ = 0;
}
inline float Heartbeat::_internal_angvel_z_degs() const {
  return angvel_z_degs_;
}
inline float Heartbeat::angvel_z_degs() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.angvel_z_degs)
  return _internal_angvel_z_degs();
}
inline void Heartbeat::_internal_set_angvel_z_degs(float value) {
  
  angvel_z_degs_ = value;
}
inline void Heartbeat::set_angvel_z_degs(float value) {
  _internal_set_angvel_z_degs(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.angvel_z_degs)
}

// float tvc_a_pos = 10;
inline void Heartbeat::clear_tvc_a_pos() {
  tvc_a_pos_ = 0;
}
inline float Heartbeat::_internal_tvc_a_pos() const {
  return tvc_a_pos_;
}
inline float Heartbeat::tvc_a_pos() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.tvc_a_pos)
  return _internal_tvc_a_pos();
}
inline void Heartbeat::_internal_set_tvc_a_pos(float value) {
  
  tvc_a_pos_ = value;
}
inline void Heartbeat::set_tvc_a_pos(float value) {
  _internal_set_tvc_a_pos(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.tvc_a_pos)
}

// float tvc_b_pos = 11;
inline void Heartbeat::clear_tvc_b_pos() {
  tvc_b_pos_ = 0;
}
inline float Heartbeat::_internal_tvc_b_pos() const {
  return tvc_b_pos_;
}
inline float Heartbeat::tvc_b_pos() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.tvc_b_pos)
  return _internal_tvc_b_pos();
}
inline void Heartbeat::_internal_set_tvc_b_pos(float value) {
  
  tvc_b_pos_ = value;
}
inline void Heartbeat::set_tvc_b_pos(float value) {
  _internal_set_tvc_b_pos(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.tvc_b_pos)
}

// int32 engine_turbine_rpm = 12;
inline void Heartbeat::clear_engine_turbine_rpm() {
  engine_turbine_rpm_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Heartbeat::_internal_engine_turbine_rpm() const {
  return engine_turbine_rpm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Heartbeat::engine_turbine_rpm() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.engine_turbine_rpm)
  return _internal_engine_turbine_rpm();
}
inline void Heartbeat::_internal_set_engine_turbine_rpm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  engine_turbine_rpm_ = value;
}
inline void Heartbeat::set_engine_turbine_rpm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_engine_turbine_rpm(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.engine_turbine_rpm)
}

// int32 engine_rpm_setpoint = 13;
inline void Heartbeat::clear_engine_rpm_setpoint() {
  engine_rpm_setpoint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Heartbeat::_internal_engine_rpm_setpoint() const {
  return engine_rpm_setpoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Heartbeat::engine_rpm_setpoint() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.engine_rpm_setpoint)
  return _internal_engine_rpm_setpoint();
}
inline void Heartbeat::_internal_set_engine_rpm_setpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  engine_rpm_setpoint_ = value;
}
inline void Heartbeat::set_engine_rpm_setpoint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_engine_rpm_setpoint(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.engine_rpm_setpoint)
}

// int32 engine_egt_c = 14;
inline void Heartbeat::clear_engine_egt_c() {
  engine_egt_c_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Heartbeat::_internal_engine_egt_c() const {
  return engine_egt_c_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Heartbeat::engine_egt_c() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.engine_egt_c)
  return _internal_engine_egt_c();
}
inline void Heartbeat::_internal_set_engine_egt_c(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  engine_egt_c_ = value;
}
inline void Heartbeat::set_engine_egt_c(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_engine_egt_c(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.engine_egt_c)
}

// float engine_pump_voltage = 15;
inline void Heartbeat::clear_engine_pump_voltage() {
  engine_pump_voltage_ = 0;
}
inline float Heartbeat::_internal_engine_pump_voltage() const {
  return engine_pump_voltage_;
}
inline float Heartbeat::engine_pump_voltage() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.engine_pump_voltage)
  return _internal_engine_pump_voltage();
}
inline void Heartbeat::_internal_set_engine_pump_voltage(float value) {
  
  engine_pump_voltage_ = value;
}
inline void Heartbeat::set_engine_pump_voltage(float value) {
  _internal_set_engine_pump_voltage(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.engine_pump_voltage)
}

// uint32 engine_turbine_state = 16;
inline void Heartbeat::clear_engine_turbine_state() {
  engine_turbine_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heartbeat::_internal_engine_turbine_state() const {
  return engine_turbine_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heartbeat::engine_turbine_state() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.engine_turbine_state)
  return _internal_engine_turbine_state();
}
inline void Heartbeat::_internal_set_engine_turbine_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  engine_turbine_state_ = value;
}
inline void Heartbeat::set_engine_turbine_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_engine_turbine_state(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.engine_turbine_state)
}

// uint32 engine_off_condition = 17;
inline void Heartbeat::clear_engine_off_condition() {
  engine_off_condition_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heartbeat::_internal_engine_off_condition() const {
  return engine_off_condition_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heartbeat::engine_off_condition() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.engine_off_condition)
  return _internal_engine_off_condition();
}
inline void Heartbeat::_internal_set_engine_off_condition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  engine_off_condition_ = value;
}
inline void Heartbeat::set_engine_off_condition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_engine_off_condition(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.engine_off_condition)
}

// uint32 engine_throttle_percent = 18;
inline void Heartbeat::clear_engine_throttle_percent() {
  engine_throttle_percent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heartbeat::_internal_engine_throttle_percent() const {
  return engine_throttle_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heartbeat::engine_throttle_percent() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.engine_throttle_percent)
  return _internal_engine_throttle_percent();
}
inline void Heartbeat::_internal_set_engine_throttle_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  engine_throttle_percent_ = value;
}
inline void Heartbeat::set_engine_throttle_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_engine_throttle_percent(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.engine_throttle_percent)
}

// float engine_current_a = 19;
inline void Heartbeat::clear_engine_current_a() {
  engine_current_a_ = 0;
}
inline float Heartbeat::_internal_engine_current_a() const {
  return engine_current_a_;
}
inline float Heartbeat::engine_current_a() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.engine_current_a)
  return _internal_engine_current_a();
}
inline void Heartbeat::_internal_set_engine_current_a(float value) {
  
  engine_current_a_ = value;
}
inline void Heartbeat::set_engine_current_a(float value) {
  _internal_set_engine_current_a(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.engine_current_a)
}

// int32 altitude = 20;
inline void Heartbeat::clear_altitude() {
  altitude_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Heartbeat::_internal_altitude() const {
  return altitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Heartbeat::altitude() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.altitude)
  return _internal_altitude();
}
inline void Heartbeat::_internal_set_altitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  altitude_ = value;
}
inline void Heartbeat::set_altitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.altitude)
}

// uint32 heartbeat_counter = 21;
inline void Heartbeat::clear_heartbeat_counter() {
  heartbeat_counter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heartbeat::_internal_heartbeat_counter() const {
  return heartbeat_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Heartbeat::heartbeat_counter() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.heartbeat_counter)
  return _internal_heartbeat_counter();
}
inline void Heartbeat::_internal_set_heartbeat_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  heartbeat_counter_ = value;
}
inline void Heartbeat::set_heartbeat_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heartbeat_counter(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.heartbeat_counter)
}

// bool guidance_internal = 22;
inline void Heartbeat::clear_guidance_internal() {
  guidance_internal_ = false;
}
inline bool Heartbeat::_internal_guidance_internal() const {
  return guidance_internal_;
}
inline bool Heartbeat::guidance_internal() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.guidance_internal)
  return _internal_guidance_internal();
}
inline void Heartbeat::_internal_set_guidance_internal(bool value) {
  
  guidance_internal_ = value;
}
inline void Heartbeat::set_guidance_internal(bool value) {
  _internal_set_guidance_internal(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.guidance_internal)
}

// bool enable_acs = 23;
inline void Heartbeat::clear_enable_acs() {
  enable_acs_ = false;
}
inline bool Heartbeat::_internal_enable_acs() const {
  return enable_acs_;
}
inline bool Heartbeat::enable_acs() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.enable_acs)
  return _internal_enable_acs();
}
inline void Heartbeat::_internal_set_enable_acs(bool value) {
  
  enable_acs_ = value;
}
inline void Heartbeat::set_enable_acs(bool value) {
  _internal_set_enable_acs(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.enable_acs)
}

// bool enable_tvc = 24;
inline void Heartbeat::clear_enable_tvc() {
  enable_tvc_ = false;
}
inline bool Heartbeat::_internal_enable_tvc() const {
  return enable_tvc_;
}
inline bool Heartbeat::enable_tvc() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.enable_tvc)
  return _internal_enable_tvc();
}
inline void Heartbeat::_internal_set_enable_tvc(bool value) {
  
  enable_tvc_ = value;
}
inline void Heartbeat::set_enable_tvc(bool value) {
  _internal_set_enable_tvc(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.enable_tvc)
}

// bool enable_engine = 25;
inline void Heartbeat::clear_enable_engine() {
  enable_engine_ = false;
}
inline bool Heartbeat::_internal_enable_engine() const {
  return enable_engine_;
}
inline bool Heartbeat::enable_engine() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.enable_engine)
  return _internal_enable_engine();
}
inline void Heartbeat::_internal_set_enable_engine(bool value) {
  
  enable_engine_ = value;
}
inline void Heartbeat::set_enable_engine(bool value) {
  _internal_set_enable_engine(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.enable_engine)
}

// bool imu_calibration_status = 26;
inline void Heartbeat::clear_imu_calibration_status() {
  imu_calibration_status_ = false;
}
inline bool Heartbeat::_internal_imu_calibration_status() const {
  return imu_calibration_status_;
}
inline bool Heartbeat::imu_calibration_status() const {
  // @@protoc_insertion_point(field_get:leapfrog.Heartbeat.imu_calibration_status)
  return _internal_imu_calibration_status();
}
inline void Heartbeat::_internal_set_imu_calibration_status(bool value) {
  
  imu_calibration_status_ = value;
}
inline void Heartbeat::set_imu_calibration_status(bool value) {
  _internal_set_imu_calibration_status(value);
  // @@protoc_insertion_point(field_set:leapfrog.Heartbeat.imu_calibration_status)
}

// -------------------------------------------------------------------

// Command

// string command_text = 1;
inline void Command::clear_command_text() {
  command_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Command::command_text() const {
  // @@protoc_insertion_point(field_get:leapfrog.Command.command_text)
  return _internal_command_text();
}
inline void Command::set_command_text(const std::string& value) {
  _internal_set_command_text(value);
  // @@protoc_insertion_point(field_set:leapfrog.Command.command_text)
}
inline std::string* Command::mutable_command_text() {
  // @@protoc_insertion_point(field_mutable:leapfrog.Command.command_text)
  return _internal_mutable_command_text();
}
inline const std::string& Command::_internal_command_text() const {
  return command_text_.Get();
}
inline void Command::_internal_set_command_text(const std::string& value) {
  
  command_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Command::set_command_text(std::string&& value) {
  
  command_text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:leapfrog.Command.command_text)
}
inline void Command::set_command_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:leapfrog.Command.command_text)
}
inline void Command::set_command_text(const char* value,
    size_t size) {
  
  command_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:leapfrog.Command.command_text)
}
inline std::string* Command::_internal_mutable_command_text() {
  
  return command_text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Command::release_command_text() {
  // @@protoc_insertion_point(field_release:leapfrog.Command.command_text)
  return command_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Command::set_allocated_command_text(std::string* command_text) {
  if (command_text != nullptr) {
    
  } else {
    
  }
  command_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command_text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:leapfrog.Command.command_text)
}
inline std::string* Command::unsafe_arena_release_command_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:leapfrog.Command.command_text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return command_text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Command::unsafe_arena_set_allocated_command_text(
    std::string* command_text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (command_text != nullptr) {
    
  } else {
    
  }
  command_text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      command_text, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:leapfrog.Command.command_text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace leapfrog

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_heartbeat_2eproto
