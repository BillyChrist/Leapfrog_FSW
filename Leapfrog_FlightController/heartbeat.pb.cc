// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heartbeat.proto

#include "heartbeat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace leapfrog {
class HeartbeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Heartbeat> _instance;
} _Heartbeat_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Command> _instance;
} _Command_default_instance_;
}  // namespace leapfrog
static void InitDefaultsscc_info_Command_heartbeat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::leapfrog::_Command_default_instance_;
    new (ptr) ::leapfrog::Command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::leapfrog::Command::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Command_heartbeat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Command_heartbeat_2eproto}, {}};

static void InitDefaultsscc_info_Heartbeat_heartbeat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::leapfrog::_Heartbeat_default_instance_;
    new (ptr) ::leapfrog::Heartbeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::leapfrog::Heartbeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Heartbeat_heartbeat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Heartbeat_heartbeat_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_heartbeat_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_heartbeat_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_heartbeat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_heartbeat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, roll_deg_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, pitch_deg_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, yaw_deg_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, acc_x_g_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, acc_y_g_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, acc_z_g_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, angvel_x_degs_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, angvel_y_degs_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, angvel_z_degs_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, tvc_a_pos_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, tvc_b_pos_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, engine_turbine_rpm_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, engine_rpm_setpoint_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, engine_egt_c_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, engine_pump_voltage_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, engine_turbine_state_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, engine_off_condition_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, engine_throttle_percent_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, engine_current_a_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, altitude_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, heartbeat_counter_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, guidance_internal_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, enable_acs_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, enable_tvc_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, enable_engine_),
  PROTOBUF_FIELD_OFFSET(::leapfrog::Heartbeat, imu_calibration_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::leapfrog::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::leapfrog::Command, command_text_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::leapfrog::Heartbeat)},
  { 31, -1, sizeof(::leapfrog::Command)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::leapfrog::_Heartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::leapfrog::_Command_default_instance_),
};

const char descriptor_table_protodef_heartbeat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017heartbeat.proto\022\010leapfrog\"\351\004\n\tHeartbea"
  "t\022\020\n\010roll_deg\030\001 \001(\002\022\021\n\tpitch_deg\030\002 \001(\002\022\017"
  "\n\007yaw_deg\030\003 \001(\002\022\017\n\007acc_x_g\030\004 \001(\002\022\017\n\007acc_"
  "y_g\030\005 \001(\002\022\017\n\007acc_z_g\030\006 \001(\002\022\025\n\rangvel_x_d"
  "egs\030\007 \001(\002\022\025\n\rangvel_y_degs\030\010 \001(\002\022\025\n\rangv"
  "el_z_degs\030\t \001(\002\022\021\n\ttvc_a_pos\030\n \001(\002\022\021\n\ttv"
  "c_b_pos\030\013 \001(\002\022\032\n\022engine_turbine_rpm\030\014 \001("
  "\005\022\033\n\023engine_rpm_setpoint\030\r \001(\005\022\024\n\014engine"
  "_egt_c\030\016 \001(\005\022\033\n\023engine_pump_voltage\030\017 \001("
  "\002\022\034\n\024engine_turbine_state\030\020 \001(\r\022\034\n\024engin"
  "e_off_condition\030\021 \001(\r\022\037\n\027engine_throttle"
  "_percent\030\022 \001(\r\022\030\n\020engine_current_a\030\023 \001(\002"
  "\022\020\n\010altitude\030\024 \001(\005\022\031\n\021heartbeat_counter\030"
  "\025 \001(\r\022\031\n\021guidance_internal\030\026 \001(\010\022\022\n\nenab"
  "le_acs\030\027 \001(\010\022\022\n\nenable_tvc\030\030 \001(\010\022\025\n\renab"
  "le_engine\030\031 \001(\010\022\036\n\026imu_calibration_statu"
  "s\030\032 \001(\010\"\037\n\007Command\022\024\n\014command_text\030\001 \001(\t"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_heartbeat_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_heartbeat_2eproto_sccs[2] = {
  &scc_info_Command_heartbeat_2eproto.base,
  &scc_info_Heartbeat_heartbeat_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_heartbeat_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_heartbeat_2eproto = {
  false, false, descriptor_table_protodef_heartbeat_2eproto, "heartbeat.proto", 688,
  &descriptor_table_heartbeat_2eproto_once, descriptor_table_heartbeat_2eproto_sccs, descriptor_table_heartbeat_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_heartbeat_2eproto::offsets,
  file_level_metadata_heartbeat_2eproto, 2, file_level_enum_descriptors_heartbeat_2eproto, file_level_service_descriptors_heartbeat_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_heartbeat_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_heartbeat_2eproto)), true);
namespace leapfrog {

// ===================================================================

void Heartbeat::InitAsDefaultInstance() {
}
class Heartbeat::_Internal {
 public:
};

Heartbeat::Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:leapfrog.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_deg_, &from.roll_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&imu_calibration_status_) -
    reinterpret_cast<char*>(&roll_deg_)) + sizeof(imu_calibration_status_));
  // @@protoc_insertion_point(copy_constructor:leapfrog.Heartbeat)
}

void Heartbeat::SharedCtor() {
  ::memset(&roll_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imu_calibration_status_) -
      reinterpret_cast<char*>(&roll_deg_)) + sizeof(imu_calibration_status_));
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:leapfrog.Heartbeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Heartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Heartbeat::ArenaDtor(void* object) {
  Heartbeat* _this = reinterpret_cast< Heartbeat* >(object);
  (void)_this;
}
void Heartbeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Heartbeat& Heartbeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Heartbeat_heartbeat_2eproto.base);
  return *internal_default_instance();
}


void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:leapfrog.Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imu_calibration_status_) -
      reinterpret_cast<char*>(&roll_deg_)) + sizeof(imu_calibration_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float roll_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          roll_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_x_g = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          acc_x_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_y_g = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          acc_y_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc_z_g = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          acc_z_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angvel_x_degs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          angvel_x_degs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angvel_y_degs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          angvel_y_degs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angvel_z_degs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          angvel_z_degs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tvc_a_pos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          tvc_a_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tvc_b_pos = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          tvc_b_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 engine_turbine_rpm = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          engine_turbine_rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 engine_rpm_setpoint = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          engine_rpm_setpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 engine_egt_c = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          engine_egt_c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float engine_pump_voltage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          engine_pump_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 engine_turbine_state = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          engine_turbine_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 engine_off_condition = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          engine_off_condition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 engine_throttle_percent = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          engine_throttle_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float engine_current_a = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          engine_current_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 altitude = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 heartbeat_counter = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          heartbeat_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool guidance_internal = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          guidance_internal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_acs = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          enable_acs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_tvc = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          enable_tvc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_engine = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          enable_engine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool imu_calibration_status = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          imu_calibration_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Heartbeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:leapfrog.Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_deg = 1;
  if (!(this->roll_deg() <= 0 && this->roll_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_deg(), target);
  }

  // float pitch_deg = 2;
  if (!(this->pitch_deg() <= 0 && this->pitch_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_deg(), target);
  }

  // float yaw_deg = 3;
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_deg(), target);
  }

  // float acc_x_g = 4;
  if (!(this->acc_x_g() <= 0 && this->acc_x_g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_acc_x_g(), target);
  }

  // float acc_y_g = 5;
  if (!(this->acc_y_g() <= 0 && this->acc_y_g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_acc_y_g(), target);
  }

  // float acc_z_g = 6;
  if (!(this->acc_z_g() <= 0 && this->acc_z_g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_acc_z_g(), target);
  }

  // float angvel_x_degs = 7;
  if (!(this->angvel_x_degs() <= 0 && this->angvel_x_degs() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_angvel_x_degs(), target);
  }

  // float angvel_y_degs = 8;
  if (!(this->angvel_y_degs() <= 0 && this->angvel_y_degs() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_angvel_y_degs(), target);
  }

  // float angvel_z_degs = 9;
  if (!(this->angvel_z_degs() <= 0 && this->angvel_z_degs() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_angvel_z_degs(), target);
  }

  // float tvc_a_pos = 10;
  if (!(this->tvc_a_pos() <= 0 && this->tvc_a_pos() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_tvc_a_pos(), target);
  }

  // float tvc_b_pos = 11;
  if (!(this->tvc_b_pos() <= 0 && this->tvc_b_pos() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_tvc_b_pos(), target);
  }

  // int32 engine_turbine_rpm = 12;
  if (this->engine_turbine_rpm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_engine_turbine_rpm(), target);
  }

  // int32 engine_rpm_setpoint = 13;
  if (this->engine_rpm_setpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_engine_rpm_setpoint(), target);
  }

  // int32 engine_egt_c = 14;
  if (this->engine_egt_c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_engine_egt_c(), target);
  }

  // float engine_pump_voltage = 15;
  if (!(this->engine_pump_voltage() <= 0 && this->engine_pump_voltage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_engine_pump_voltage(), target);
  }

  // uint32 engine_turbine_state = 16;
  if (this->engine_turbine_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_engine_turbine_state(), target);
  }

  // uint32 engine_off_condition = 17;
  if (this->engine_off_condition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_engine_off_condition(), target);
  }

  // uint32 engine_throttle_percent = 18;
  if (this->engine_throttle_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_engine_throttle_percent(), target);
  }

  // float engine_current_a = 19;
  if (!(this->engine_current_a() <= 0 && this->engine_current_a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_engine_current_a(), target);
  }

  // int32 altitude = 20;
  if (this->altitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_altitude(), target);
  }

  // uint32 heartbeat_counter = 21;
  if (this->heartbeat_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_heartbeat_counter(), target);
  }

  // bool guidance_internal = 22;
  if (this->guidance_internal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_guidance_internal(), target);
  }

  // bool enable_acs = 23;
  if (this->enable_acs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_enable_acs(), target);
  }

  // bool enable_tvc = 24;
  if (this->enable_tvc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_enable_tvc(), target);
  }

  // bool enable_engine = 25;
  if (this->enable_engine() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_enable_engine(), target);
  }

  // bool imu_calibration_status = 26;
  if (this->imu_calibration_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_imu_calibration_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:leapfrog.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:leapfrog.Heartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_deg = 1;
  if (!(this->roll_deg() <= 0 && this->roll_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch_deg = 2;
  if (!(this->pitch_deg() <= 0 && this->pitch_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_deg = 3;
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc_x_g = 4;
  if (!(this->acc_x_g() <= 0 && this->acc_x_g() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc_y_g = 5;
  if (!(this->acc_y_g() <= 0 && this->acc_y_g() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc_z_g = 6;
  if (!(this->acc_z_g() <= 0 && this->acc_z_g() >= 0)) {
    total_size += 1 + 4;
  }

  // float angvel_x_degs = 7;
  if (!(this->angvel_x_degs() <= 0 && this->angvel_x_degs() >= 0)) {
    total_size += 1 + 4;
  }

  // float angvel_y_degs = 8;
  if (!(this->angvel_y_degs() <= 0 && this->angvel_y_degs() >= 0)) {
    total_size += 1 + 4;
  }

  // float angvel_z_degs = 9;
  if (!(this->angvel_z_degs() <= 0 && this->angvel_z_degs() >= 0)) {
    total_size += 1 + 4;
  }

  // float tvc_a_pos = 10;
  if (!(this->tvc_a_pos() <= 0 && this->tvc_a_pos() >= 0)) {
    total_size += 1 + 4;
  }

  // float tvc_b_pos = 11;
  if (!(this->tvc_b_pos() <= 0 && this->tvc_b_pos() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 engine_turbine_rpm = 12;
  if (this->engine_turbine_rpm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_engine_turbine_rpm());
  }

  // int32 engine_rpm_setpoint = 13;
  if (this->engine_rpm_setpoint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_engine_rpm_setpoint());
  }

  // int32 engine_egt_c = 14;
  if (this->engine_egt_c() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_engine_egt_c());
  }

  // float engine_pump_voltage = 15;
  if (!(this->engine_pump_voltage() <= 0 && this->engine_pump_voltage() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 engine_turbine_state = 16;
  if (this->engine_turbine_state() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_engine_turbine_state());
  }

  // uint32 engine_off_condition = 17;
  if (this->engine_off_condition() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_engine_off_condition());
  }

  // uint32 engine_throttle_percent = 18;
  if (this->engine_throttle_percent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_engine_throttle_percent());
  }

  // float engine_current_a = 19;
  if (!(this->engine_current_a() <= 0 && this->engine_current_a() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 altitude = 20;
  if (this->altitude() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_altitude());
  }

  // uint32 heartbeat_counter = 21;
  if (this->heartbeat_counter() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_heartbeat_counter());
  }

  // bool guidance_internal = 22;
  if (this->guidance_internal() != 0) {
    total_size += 2 + 1;
  }

  // bool enable_acs = 23;
  if (this->enable_acs() != 0) {
    total_size += 2 + 1;
  }

  // bool enable_tvc = 24;
  if (this->enable_tvc() != 0) {
    total_size += 2 + 1;
  }

  // bool enable_engine = 25;
  if (this->enable_engine() != 0) {
    total_size += 2 + 1;
  }

  // bool imu_calibration_status = 26;
  if (this->imu_calibration_status() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:leapfrog.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Heartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Heartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:leapfrog.Heartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:leapfrog.Heartbeat)
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:leapfrog.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.roll_deg() <= 0 && from.roll_deg() >= 0)) {
    _internal_set_roll_deg(from._internal_roll_deg());
  }
  if (!(from.pitch_deg() <= 0 && from.pitch_deg() >= 0)) {
    _internal_set_pitch_deg(from._internal_pitch_deg());
  }
  if (!(from.yaw_deg() <= 0 && from.yaw_deg() >= 0)) {
    _internal_set_yaw_deg(from._internal_yaw_deg());
  }
  if (!(from.acc_x_g() <= 0 && from.acc_x_g() >= 0)) {
    _internal_set_acc_x_g(from._internal_acc_x_g());
  }
  if (!(from.acc_y_g() <= 0 && from.acc_y_g() >= 0)) {
    _internal_set_acc_y_g(from._internal_acc_y_g());
  }
  if (!(from.acc_z_g() <= 0 && from.acc_z_g() >= 0)) {
    _internal_set_acc_z_g(from._internal_acc_z_g());
  }
  if (!(from.angvel_x_degs() <= 0 && from.angvel_x_degs() >= 0)) {
    _internal_set_angvel_x_degs(from._internal_angvel_x_degs());
  }
  if (!(from.angvel_y_degs() <= 0 && from.angvel_y_degs() >= 0)) {
    _internal_set_angvel_y_degs(from._internal_angvel_y_degs());
  }
  if (!(from.angvel_z_degs() <= 0 && from.angvel_z_degs() >= 0)) {
    _internal_set_angvel_z_degs(from._internal_angvel_z_degs());
  }
  if (!(from.tvc_a_pos() <= 0 && from.tvc_a_pos() >= 0)) {
    _internal_set_tvc_a_pos(from._internal_tvc_a_pos());
  }
  if (!(from.tvc_b_pos() <= 0 && from.tvc_b_pos() >= 0)) {
    _internal_set_tvc_b_pos(from._internal_tvc_b_pos());
  }
  if (from.engine_turbine_rpm() != 0) {
    _internal_set_engine_turbine_rpm(from._internal_engine_turbine_rpm());
  }
  if (from.engine_rpm_setpoint() != 0) {
    _internal_set_engine_rpm_setpoint(from._internal_engine_rpm_setpoint());
  }
  if (from.engine_egt_c() != 0) {
    _internal_set_engine_egt_c(from._internal_engine_egt_c());
  }
  if (!(from.engine_pump_voltage() <= 0 && from.engine_pump_voltage() >= 0)) {
    _internal_set_engine_pump_voltage(from._internal_engine_pump_voltage());
  }
  if (from.engine_turbine_state() != 0) {
    _internal_set_engine_turbine_state(from._internal_engine_turbine_state());
  }
  if (from.engine_off_condition() != 0) {
    _internal_set_engine_off_condition(from._internal_engine_off_condition());
  }
  if (from.engine_throttle_percent() != 0) {
    _internal_set_engine_throttle_percent(from._internal_engine_throttle_percent());
  }
  if (!(from.engine_current_a() <= 0 && from.engine_current_a() >= 0)) {
    _internal_set_engine_current_a(from._internal_engine_current_a());
  }
  if (from.altitude() != 0) {
    _internal_set_altitude(from._internal_altitude());
  }
  if (from.heartbeat_counter() != 0) {
    _internal_set_heartbeat_counter(from._internal_heartbeat_counter());
  }
  if (from.guidance_internal() != 0) {
    _internal_set_guidance_internal(from._internal_guidance_internal());
  }
  if (from.enable_acs() != 0) {
    _internal_set_enable_acs(from._internal_enable_acs());
  }
  if (from.enable_tvc() != 0) {
    _internal_set_enable_tvc(from._internal_enable_tvc());
  }
  if (from.enable_engine() != 0) {
    _internal_set_enable_engine(from._internal_enable_engine());
  }
  if (from.imu_calibration_status() != 0) {
    _internal_set_imu_calibration_status(from._internal_imu_calibration_status());
  }
}

void Heartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:leapfrog.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:leapfrog.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Heartbeat, imu_calibration_status_)
      + sizeof(Heartbeat::imu_calibration_status_)
      - PROTOBUF_FIELD_OFFSET(Heartbeat, roll_deg_)>(
          reinterpret_cast<char*>(&roll_deg_),
          reinterpret_cast<char*>(&other->roll_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Heartbeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Command::InitAsDefaultInstance() {
}
class Command::_Internal {
 public:
};

Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:leapfrog.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command_text().empty()) {
    command_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_command_text(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:leapfrog.Command)
}

void Command::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Command_heartbeat_2eproto.base);
  command_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:leapfrog.Command)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  command_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Command::ArenaDtor(void* object) {
  Command* _this = reinterpret_cast< Command* >(object);
  (void)_this;
}
void Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Command_heartbeat_2eproto.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:leapfrog.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string command_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_command_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "leapfrog.Command.command_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:leapfrog.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string command_text = 1;
  if (this->command_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command_text().data(), static_cast<int>(this->_internal_command_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "leapfrog.Command.command_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:leapfrog.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:leapfrog.Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string command_text = 1;
  if (this->command_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:leapfrog.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:leapfrog.Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:leapfrog.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:leapfrog.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command_text().size() > 0) {
    _internal_set_command_text(from._internal_command_text());
  }
}

void Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:leapfrog.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:leapfrog.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  command_text_.Swap(&other->command_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace leapfrog
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::leapfrog::Heartbeat* Arena::CreateMaybeMessage< ::leapfrog::Heartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::leapfrog::Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::leapfrog::Command* Arena::CreateMaybeMessage< ::leapfrog::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::leapfrog::Command >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
